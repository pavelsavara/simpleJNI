using Microsoft.CodeAnalysis;
using System.Text;

// from dotnet/runtime \src\libraries\System.Runtime.InteropServices\gen\Microsoft.Interop.SourceGeneration
namespace Microsoft.Interop;

internal static class IncrementalGeneratorInitializationContextExtensions
{
    public static void RegisterDiagnostics(this IncrementalGeneratorInitializationContext context, IncrementalValuesProvider<Diagnostic> diagnostics)
    {
        context.RegisterSourceOutput(diagnostics, (context, diagnostic) =>
        {
            context.ReportDiagnostic(diagnostic);
        });
    }

    public static void RegisterConcatenatedSyntaxOutputs<TNode>(this IncrementalGeneratorInitializationContext context, IncrementalValuesProvider<TNode> nodes, string fileName)
            where TNode : SyntaxNode
    {
        IncrementalValueProvider<string> generatedMethods = nodes
            .Select(
                static (node, ct) => node.NormalizeWhitespace().ToFullString())
            .Collect()
            .Select(static (generatedSources, ct) =>
            {
                StringBuilder source = new();
                // Mark in source that the file is auto-generated.
                source.AppendLine("// <auto-generated/>");
                foreach (string generated in generatedSources)
                {
                    source.AppendLine(generated);
                }
                return source.ToString();
            });

        context.RegisterSourceOutput(generatedMethods,
            (context, source) =>
            {
                context.AddSource(fileName, source);
            });
    }
}
